($SYS_LABEL_START)
@256
D=A
@SP
M=D
@$SYS_AUTO_LABEL_0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
($SYS_AUTO_LABEL_0)
($SYS_LABEL_END)
@$SYS_LABEL_END
0;JMP
($SYS_LABEL_CUSTOME_START)
// C_FUNCTION: Main.fibonacci, 0
(Main.fibonacci)
// C_PUSH: argument, 0
@0
D=A
@ARG
AD=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH: constant, 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_ARITHMETIC: lt, 
@SP
AM=M-1
D=M
@SP
AM=M-1
A=M
D=A-D
@$SYS_AUTO_LABEL_1
D;JLT
@0
D=A
@$SYS_AUTO_LABEL_2
0;JMP
($SYS_AUTO_LABEL_1)
@0
D=!A
($SYS_AUTO_LABEL_2)
@SP
A=M
M=D
@SP
M=M+1
// C_IF: N_LT_2, 
@SP
AM=M-1
D=M
@N_LT_2
D;JNE
// C_GOTO: N_GE_2, 
@N_GE_2
0;JMP
// C_LABEL: N_LT_2, 
(N_LT_2)
// C_PUSH: argument, 0
@0
D=A
@ARG
AD=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_RETURN: , 
@LCL
AD=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
AM=M-1
D=M
@THAT
M=D
@13
AM=M-1
D=M
@THIS
M=D
@13
AM=M-1
D=M
@ARG
M=D
@13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// C_LABEL: N_GE_2, 
(N_GE_2)
// C_PUSH: argument, 0
@0
D=A
@ARG
AD=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH: constant, 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_ARITHMETIC: sub, 
@SP
AM=M-1
D=M
@SP
AM=M-1
A=M
D=A-D
@SP
A=M
M=D
@SP
M=M+1
// C_CALL: Main.fibonacci, 1
@$SYS_AUTO_LABEL_3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
($SYS_AUTO_LABEL_3)
// C_PUSH: argument, 0
@0
D=A
@ARG
AD=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH: constant, 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_ARITHMETIC: sub, 
@SP
AM=M-1
D=M
@SP
AM=M-1
A=M
D=A-D
@SP
A=M
M=D
@SP
M=M+1
// C_CALL: Main.fibonacci, 1
@$SYS_AUTO_LABEL_4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
($SYS_AUTO_LABEL_4)
// C_ARITHMETIC: add, 
@SP
AM=M-1
D=M
@SP
AM=M-1
A=M
D=D+A
@SP
A=M
M=D
@SP
M=M+1
// C_RETURN: , 
@LCL
AD=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
AM=M-1
D=M
@THAT
M=D
@13
AM=M-1
D=M
@THIS
M=D
@13
AM=M-1
D=M
@ARG
M=D
@13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// Main has 0 static variables, total 0 static variables
// C_FUNCTION: Sys.init, 0
(Sys.init)
// C_PUSH: constant, 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL: Main.fibonacci, 1
@$SYS_AUTO_LABEL_5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
($SYS_AUTO_LABEL_5)
// C_LABEL: END, 
(END)
// C_GOTO: END, 
@END
0;JMP
// Sys has 0 static variables, total 0 static variables
